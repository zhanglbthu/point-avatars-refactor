train{
    # folder structure: exps_folder/subject/methodname/train_split/train/[checkpoints, saved conf]
    #                                                             /eval/test_split/step/image_folders
    exps_folder = ../data/experiments-8_25/ # location of experiments folder, use ln -s to link to data disk
    methodname = pointavatar
    dataset_class = datasets.real_dataset.FaceDataset
    learning_rate = 1.0e-4
    learning_rate_cam = 5.0e-4
    num_pixels = 2048
    max_points_training = 409600 # max number of points calculated during training (num_batch * num_points), reduce this if memory is limited.
    max_batch = 8
    upsample_freq = 5 # upsample is performed every 5 epochs, if number of points won't exceed point_cloud.max_points
    plot_freq = 1
    sched_milestones = [40, 60] # decay learning rate in these epochs
    sched_factor = 0.5
    GT_lbs_milestones = [10, 20, 30, 40] # decay flame regularization in these epcohs
    GT_lbs_factor = 0.5
    optimize_expression=False # optimize flame expressions # ?
    optimize_camera=False # optimize camera and flame poses, this is important for alignment and numerical results... # ?
}
loss{
    mask_weight = 1.0
    lbs_weight = 10.0
    eikonal_weight = 0.1
    sdf_consistency_weight =1.0
    vgg_feature_weight = 0.1
}
dataset{
    data_folder = ../data/datasets
    subject_name = zhanglibo
    json_name = flame_params.json
    use_mean_expression=True # canonical expression is set to the mean expression of the training dataset
    use_var_expression=True # used for blendshape regularization. Apply less regularization when expression variance is large.
    canonical_pose=0.4 # canonical pose is set to zero, except the jaw opening
    train
    {
        sub_dir = [test01]
        img_res = [512, 512] # image resolution
        subsample = 1
        load_images = True
    }
    test{
        sub_dir = [test01]
        img_res = [512, 512]
        subsample=  200
        load_images = True
    }
}
model{
    prune_thresh=0.5 # 剪枝阈值
    geometry_network
    {
        d_in = 3 # 输入维度
        d_out = 1 # 输出维度
        feature_vector_size = 3 # 特征向量维度
        dims = [256, 256, 256, 256, 256, 256, 256, 256, 256] # 各个隐藏层的维度
        geometric_init = True # 是否使用几何初始化
        bias = 0.6 # 偏置
        skip_in = [4] # 跳跃连接
        weight_norm = True # 是否使用权重归一化
        multires = 6 # 多分辨率层数
    }
    rendering_network
    {
        d_in = 3 # 输入维度
        feature_vector_size = 0 # 特征向量维度，0表示不使用特征向量，而是从其他来源获取输入
        d_out = 3 # 输出维度
        dims = [64, 64] # 各个隐藏层的维度
        weight_norm = True # 是否使用权重归一化
        multires_view = 0 # 多分辨率视图层数
        multires_pnts = 0 # 多分辨率点层数
    }
    deformer_network
    {
        d_in = 3
        dims = [128, 128, 128, 128]
        weight_norm = True
        multires = 0
	    num_exp = 50
	    ghostbone = True
	    deform_c = True
    }
    point_cloud
    {
        n_init_points=400
        max_points=204800 # max number of points for the canonical model, reduce this if memory is limited.
    }
}
